name: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version of the release"
        required: true
        default: '2.4.0-rc.1'
      branch:
        description: "Branch to release from"
        required: true
        default: 'master'
      java-version:
        description: "JDK version"
        required: true
        default: '8'
      java-distribution:
        description: "JDK distribution"
        required: true
        default: 'zulu'

env:
  RELEASE_VERSION: ${{ github.event.inputs.version }}
  OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
  ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
  ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
  GITHUB_ACTOR: ${{ github.actor }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GRADLE_OPTS: -Dorg.gradle.configureondemand=true -Dorg.gradle.parallel=false -Dkotlin.incremental=false -Dorg.gradle.jvmargs="-Dfile.encoding=UTF-8 -Xmx3g -XX:MaxMetaspaceSize=756m -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError"

permissions:
  contents: read

jobs:
  publish-base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK ${{ github.event.inputs.java-version }} (${{ github.event.inputs.java-distribution }})
        uses: actions/setup-java@v3
        with:
          java-version: ${{ github.event.inputs.java-version }}
          distribution: ${{ github.event.inputs.java-distribution }}

      - uses: gradle/gradle-build-action@v2

      - name: Publish Multiplatform release
        run: ./gradlew publishKotlinMultiplatformPublicationToOSSRHRepository

      - name: Publish JVM release
        run: ./gradlew publishJvmPublicationToOSSRHRepository

      - name: Publish JS release
        run: ./gradlew publishJsPublicationToOSSRHRepository

      - name: Publish BOM release
        run: ./gradlew publishBomPublicationToOSSRHRepository

  publish-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK ${{ github.event.inputs.java-version }} (${{ github.event.inputs.java-distribution }})
        uses: actions/setup-java@v3
        with:
          java-version: ${{ github.event.inputs.java-version }}
          distribution: ${{ github.event.inputs.java-distribution }}

      - uses: gradle/gradle-build-action@v2

      - name: Publish Linux x64 release
        run: ./gradlew publishLinuxX64PublicationToOSSRHRepository

  publish-mac:
    runs-on: macos-latest
    strategy:
      max-parallel: 6
      matrix:
        target:
          - publishMacosArm64PublicationToOSSRHRepository
          - publishMacosX64PublicationToOSSRHRepository
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK ${{ github.event.inputs.java-version }} (${{ github.event.inputs.java-distribution }})
        uses: actions/setup-java@v3
        with:
          java-version: ${{ github.event.inputs.java-version }}
          distribution: ${{ github.event.inputs.java-distribution }}

      - uses: gradle/gradle-build-action@v2

      - name: Publish
        run: ./gradlew ${{ matrix.target }}

  publish-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Set up JDK ${{ github.event.inputs.java-version }} (${{ github.event.inputs.java-distribution }})
        uses: actions/setup-java@v3
        with:
          java-version: ${{ github.event.inputs.java-version }}
          distribution: ${{ github.event.inputs.java-distribution }}

      - uses: gradle/gradle-build-action@v2

      - name: Publish MinGW x64 release
        run: ./gradlew publishMingwX64PublicationToOSSRHRepository


  release-draft:
    needs: [publish-base,publish-linux,publish-mac,publish-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Draft release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          body_path: CHANGELOG.md
          name: v${{ github.event.inputs.version }}
          tag_name: v${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print summary
        run: |
          echo "## Release ${RELEASE_VERSION} prepared :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "To finish the release:" >> $GITHUB_STEP_SUMMARY
          echo "- Go to [oss.sonatype.org](https://oss.sonatype.org/#stagingRepositories)" >> $GITHUB_STEP_SUMMARY
          echo "  - Close all repositories belonging to this release" >> $GITHUB_STEP_SUMMARY
          echo "  - Wait and refresh" >> $GITHUB_STEP_SUMMARY
          echo "  - Release the closed repositories" >> $GITHUB_STEP_SUMMARY
          echo "- Go to [releases](https://github.com/bkahlert/kommons/releases)" >> $GITHUB_STEP_SUMMARY
          echo "  - Find the draft for this release" >> $GITHUB_STEP_SUMMARY
          echo "  - Edit it and cleanup the release notes" >> $GITHUB_STEP_SUMMARY
          echo "  - Hit \"Publish release\"" >> $GITHUB_STEP_SUMMARY
