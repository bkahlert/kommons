package koodies.logging

import koodies.logging.FixedWidthRenderingLogger.Border.DOTTED
import koodies.logging.FixedWidthRenderingLogger.Border.NONE
import koodies.logging.FixedWidthRenderingLogger.Border.SOLID
import koodies.logging.SimpleRenderingLogger.Companion.withUnclosedWarningDisabled
import koodies.test.output.Bordered
import koodies.test.output.Columns
import koodies.test.testEach
import koodies.text.matchesCurlyPattern
import koodies.text.toStringMatchesCurlyPattern
import org.junit.jupiter.api.Nested
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestFactory

class BlockRenderingLoggerKtTest {

    @Test
    fun InMemoryLogger.`should log`() {
        blockLogging("name") {
            logLine { "line" }
            logStatus { "text" }
        }

        expectThatLogged().matchesCurlyPattern("""
            â•­â”€â”€â•´{}
            â”‚
            â”‚   â•­â”€â”€â•´name
            â”‚   â”‚
            â”‚   â”‚   line
            â”‚   â”‚   text {} â–®â–®
            â”‚   â”‚
            â”‚   â•°â”€â”€â•´âœ”ï¸Ž
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent())
    }

    @Test
    fun InMemoryLogger.`should log nested`() {
        blockLogging("name") {
            logLine { "outer 1" }
            logLine { "outer 2" }
            blockLogging("nested") {
                logLine { "nested 1" }
                logLine { "nested 2" }
                logLine { "nested 3" }
            }
            logLine { "outer 3" }
            logLine { "outer 4" }
        }

        expectThatLogged().matchesCurlyPattern("""
            â•­â”€â”€â•´{}
            â”‚
            â”‚   â•­â”€â”€â•´name
            â”‚   â”‚
            â”‚   â”‚   outer 1
            â”‚   â”‚   outer 2
            â”‚   â”‚   â•­â”€â”€â•´nested
            â”‚   â”‚   â”‚
            â”‚   â”‚   â”‚   nested 1
            â”‚   â”‚   â”‚   nested 2
            â”‚   â”‚   â”‚   nested 3
            â”‚   â”‚   â”‚
            â”‚   â”‚   â•°â”€â”€â•´âœ”ï¸Ž
            â”‚   â”‚   outer 3
            â”‚   â”‚   outer 4
            â”‚   â”‚
            â”‚   â•°â”€â”€â•´âœ”ï¸Ž
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent())
    }

    @Test
    fun @receiver:Columns(60) InMemoryLogger.`should log status on same column`() {
        blockLogging("name") {
            logStatus("status") { "text" }
            blockLogging("nested") {
                logStatus("status") { "text" }
            }
            blockLogging("nested") {
                logStatus("ðŸ”´ðŸŸ ðŸŸ¡ðŸŸ¢ðŸ”µðŸŸ£") { "ðŸŸ¥ðŸŸ§ðŸŸ¨ðŸŸ©ðŸŸ¦ðŸŸª" }
                logStatus { "1234567890".repeat(7) }
            }
        }

        expectThatLogged().matchesCurlyPattern("""
            {{}}
            â”‚   â”‚   text                                                              â—€â—€ status
            {{}}
            â”‚   â”‚   â”‚   text                                                          â—€â—€ status
            {{}}
            â”‚   â”‚   â”‚   ðŸŸ¥ðŸŸ§ðŸŸ¨ðŸŸ©ðŸŸ¦ðŸŸª                                                  â—€â—€ ðŸ”´ðŸŸ ðŸŸ¡ðŸŸ¢ðŸ”µðŸŸ£ 
            â”‚   â”‚   â”‚   1234567890123456789012345678901234567890123456789012          â–®â–® 
            â”‚   â”‚   â”‚   345678901234567890                                            
            {{}}
        """.trimIndent())
    }

    @Nested
    inner class Wrapping {

        @Test
        fun @receiver:Columns(20) InMemoryLogger.`should wrap long line`() {
            logLine { "X".repeat(totalColumns + 1) }
            expectThatLogged().matchesCurlyPattern("""
                â•­â”€â”€â•´{}
                â”‚
                â”‚   ${"X".repeat(totalColumns)}
                â”‚   X
                â”‚
                â•°â”€â”€â•´âœ”ï¸Ž
            """.trimIndent())
        }

        @Test
        fun @receiver:Columns(20) InMemoryLogger.`should wrap long text`() {
            logText { "X".repeat(totalColumns + 1) }
            expectThatLogged().matchesCurlyPattern("""
                â•­â”€â”€â•´{}
                â”‚
                â”‚   ${"X".repeat(totalColumns)}
                â”‚   X
                â”‚
                â•°â”€â”€â•´âœ”ï¸Ž
            """.trimIndent())
        }

        @Nested
        inner class LongStatus {

            @Test
            fun @receiver:Columns(20) InMemoryLogger.`should wrap long status text`() {
                logStatus { "X".repeat(20 + 1) }
                expectThatLogged().matchesCurlyPattern("""
                    â•­â”€â”€â•´{}
                    â”‚
                    â”‚   ${"X".repeat(20)}          â–®â–®
                    â”‚   X                             
                    â”‚
                    â•°â”€â”€â•´âœ”ï¸Ž
                """.trimIndent())
            }

            @Test
            fun @receiver:Columns(20) InMemoryLogger.`should truncate long status element`() {
                logStatus("X".repeat(50)) { "X" }
                @Suppress("SpellCheckingInspection")
                expectThatLogged().matchesCurlyPattern("""
                    â•­â”€â”€â•´{}
                    â”‚
                    â”‚   X                             â—€â—€ XXXXXXXXXXXXXXXXXXXâ€¦XXXXXXXXXXXXXXXXXXXXX
                    â”‚
                    â•°â”€â”€â•´âœ”ï¸Ž
                """.trimIndent())
            }
        }

        @Nested
        inner class URIs {

            @Test
            fun @receiver:Columns(20) InMemoryLogger.`should not wrap lines containing URIs`() {
                val text = "â”¬â”´â”¬â”´â”¤(ï½¥_â”œâ”¬â”´â”¬â”´"
                val uri = "file://".padEnd(totalColumns + 1, 'X')
                logLine { uri }
                logLine { "$text$uri" }
                logLine { "$uri$text" }
                logLine { "$text$uri$text" }

                expectThatLogged().matchesCurlyPattern("""
                    â•­â”€â”€â•´{}
                    â”‚
                    â”‚   $uri
                    â”‚   $text$uri
                    â”‚   $uri$text
                    â”‚   $text$uri$text
                    â”‚
                    â•°â”€â”€â•´âœ”ï¸Ž
                """.trimIndent())
            }

            @Test
            fun @receiver:Columns(20) InMemoryLogger.`should not wrap status text containing URIs`() {
                val text = "â”¬â”´â”¬â”´â”¤(ï½¥_â”œâ”¬â”´â”¬â”´"
                val uri = "file://".padEnd(totalColumns + 1, 'X')
                logStatus { uri }
                logStatus { "$text$uri" }
                logStatus { "$uri$text" }
                logStatus { "$text$uri$text" }

                expectThatLogged().matchesCurlyPattern("""
                    â•­â”€â”€â•´{}
                    â”‚
                    â”‚   $uriâ–®â–®
                    â”‚   $text$uriâ–®â–®
                    â”‚   $uri$textâ–®â–®
                    â”‚   $text$uri$textâ–®â–®
                    â”‚
                    â•°â”€â”€â•´âœ”ï¸Ž
                """.trimIndent())
            }
        }
    }

    private fun borderTest(solidPattern: String, dottedPattern: String, nonePattern: String, block: FixedWidthRenderingLogger.() -> Any) = testEach(
        SOLID to solidPattern,
        DOTTED to dottedPattern,
        NONE to nonePattern,
        containerNamePattern = "border={}",
    ) { (border, expectation) ->
        val label = border.name
        val logger = InMemoryLogger(name = "$label name", border = border).withUnclosedWarningDisabled.apply { block() }
        asserting { logger.expectThatLogged().toStringMatchesCurlyPattern(expectation) }
    }

    @TestFactory
    fun `should not log without any log event`() = borderTest("", "", "") {}

    @TestFactory
    fun `should log name on first log`() = borderTest(
        """
            â•­â”€â”€â•´SOLID name
            â”‚
            â”‚   line
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent(), """
            â–¶ DOTTED name
            Â· line
            âœ”ï¸Ž
        """.trimIndent(), """
            NONE name
            line
            âœ”ï¸Ž
        """.trimIndent()) {
        logLine { "line" }
    }

    @TestFactory
    fun `should log text`() = borderTest(
        """
            â•­â”€â”€â•´SOLID name
            â”‚
            â”‚   text
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent(), """
            â–¶ DOTTED name
            Â· text
            âœ”ï¸Ž
        """.trimIndent(), """
            NONE name
            text
            âœ”ï¸Ž
        """.trimIndent()) {
        logText { "text" }
    }

    @TestFactory
    fun `should log line`() = borderTest(
        """
            â•­â”€â”€â•´SOLID name
            â”‚
            â”‚   line
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent(), """
            â–¶ DOTTED name
            Â· line
            âœ”ï¸Ž
        """.trimIndent(), """
            NONE name
            line
            âœ”ï¸Ž
        """.trimIndent()) {
        logLine { "line" }
    }

    @Nested
    inner class LogException {

        @Test
        fun @receiver:Bordered(SOLID) InMemoryLogger.`should log exception SOLID`() {
            kotlin.runCatching { blockLogging("name") { throw RuntimeException("exception") } }

            expectThatLogged().matchesCurlyPattern(
                """
                    {{}}
                    â”‚   â•­â”€â”€â•´name
                    â”‚   â”‚
                    â”‚   ÏŸ
                    â”‚   â•°â”€â”€â•´RuntimeException: exception at.(BlockRenderingLoggerKtTest.kt:{})
                    {{}}
                """.trimIndent()
            )
        }

        @Test
        fun @receiver:Bordered(DOTTED) InMemoryLogger.`should log exception DOTTED`() {
            kotlin.runCatching { blockLogging("name") { throw RuntimeException("exception") } }

            expectThatLogged().matchesCurlyPattern(
                """
                    {{}}
                    â–¶ {}
                    Â· ÏŸ RuntimeException: exception at.(BlockRenderingLoggerKtTest.kt:{})
                    {{}}
                """.trimIndent()
            )
        }

        @Test
        fun @receiver:Bordered(NONE) InMemoryLogger.`should log exception NONE`() {
            kotlin.runCatching { blockLogging("name") { throw RuntimeException("exception") } }

            expectThatLogged().matchesCurlyPattern(
                """
                    {{}}
                    ÏŸ RuntimeException: exception at.(BlockRenderingLoggerKtTest.kt:{})
                    {{}}
                """.trimIndent()
            )
        }
    }

    @TestFactory
    fun `should log status`() = borderTest(
        """
            â•­â”€â”€â•´SOLID name
            â”‚
            â”‚   line {} â—€â—€ status
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent(), """
            â–¶ DOTTED name
            Â· line {} â—€â—€ status
            âœ”ï¸Ž
        """.trimIndent(), """
            NONE name
            line {} â—€â—€ status
            âœ”ï¸Ž
        """.trimIndent()) {
        logStatus(listOf("status")) { "line" }
    }

    @TestFactory
    fun `should log result`() = borderTest(
        """
            â•­â”€â”€â•´SOLID name
            â”‚
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent(), """
            â–¶ DOTTED name
            âœ”ï¸Ž
        """.trimIndent(), """
            NONE name
            âœ”ï¸Ž
        """.trimIndent()) {
        logResult { Result.success("result") }
    }

    @TestFactory
    fun `should log multiple entries`() = borderTest(
        """
            â•­â”€â”€â•´SOLID name
            â”‚
            â”‚   text
            â”‚   line
            â”‚   line {} â—€â—€ status
            â”‚
            â•°â”€â”€â•´âœ”ï¸Ž
        """.trimIndent(), """
            â–¶ DOTTED name
            Â· text
            Â· line
            Â· line {} â—€â—€ status
            âœ”ï¸Ž
        """.trimIndent(), """
            NONE name
            text
            line
            line {} â—€â—€ status
            âœ”ï¸Ž
        """.trimIndent()) {
        logText { "text" }
        logLine { "line" }
        logStatus("status") { "line" }
    }
}
